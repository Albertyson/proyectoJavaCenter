/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.RowSorter;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Alberto
 */
public class frmExplorador extends javax.swing.JFrame {

    public frmExplorador() {
        initComponents();

    }

    /**
     * Creates new form frmExplorador
     */
    public frmExplorador(String usr) {
        initComponents();
        this.usr = usr;
        this.setExtendedState(this.MAXIMIZED_BOTH);
        midir = new File("C:/" + usr);
        txtDir.setText(midir.getPath() + "\\");
        String[] list = midir.list();
        DefaultTreeModel marbol = (DefaultTreeModel) Arbol.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) marbol.getRoot();
        for (int i = 0; i < list.length; i++) {
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(new File(midir.getPath() + "\\" + list[i]));
            raiz.add(nodo);
        }
        marbol.reload();
        Arbol.setCellRenderer(new DefaultTreeCellRenderer() {
            @Override
            //Modificar los iconos del jtree
            public Component getTreeCellRendererComponent(JTree tree,
                    Object value,
                    boolean selected,
                    boolean expanded,
                    boolean leaf,
                    int row,
                    boolean hasfocus) {
                super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasfocus);
                if (value.toString().equals(midir.getPath() + "\\Imagenes")) {
                    setIcon(new ImageIcon("./src/Iconos/imagefolder.png"));
                    setText("Imágenes");
                } else if (value.toString().equals(midir.getPath() + "\\Documentos")) {
                    setIcon(new ImageIcon("./src/Iconos/documentsfolder.png"));
                    setText("Documentos");
                } else if (value.toString().equals(midir.getPath() + "\\Calendario")) {
                    setIcon(new ImageIcon("./src/Iconos/calendar.png"));
                    setText("Calendario");
                } else if (value.toString().equals(midir.getPath() + "\\Correo")) {
                    setIcon(new ImageIcon("./src/Iconos/emailfolder.png"));
                    setText("Correo");
                } else if (value.toString().equals(midir.getPath() + "\\Mensajes")) {
                    setIcon(new ImageIcon("./src/Iconos/messagefolder.png"));
                    setText("Mensajes");
                } else if (value.toString().equals(midir.getPath() + "\\Musica")) {
                    setIcon(new ImageIcon("./src/Iconos/musicfolder.png"));
                    setText("Música");
                } else if (value.toString().equals(midir.getPath() + "\\Texto")) {
                    setIcon(new ImageIcon("./src/Iconos/textfolder.png"));
                    setText("Archivos de Texto");
                } else {
                    setIcon(new ImageIcon("./src/Iconos/folder.png"));
                }
                return this;
            }
        });
        //poner el nuevo render a la tabla
        Tabla.setRowHeight(50);
        Tabla.setDefaultRenderer(Object.class, new IconCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Arbol = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        txtDir = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuAbrir = new javax.swing.JMenuItem();
        mnuEliminar = new javax.swing.JMenuItem();
        mnuCrear = new javax.swing.JMenuItem();
        mnuOrganizar = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        mnuEdicion = new javax.swing.JMenu();
        mnuCopiar = new javax.swing.JMenuItem();
        mnuPegar = new javax.swing.JMenuItem();
        mnuCambiarNombre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Explorador de archivos");
        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        Arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Arbol.setRootVisible(false);
        Arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ArbolMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Arbol);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " ", "Nombre", "Tipo", "Fecha de modificación", "Tamaño en Kb"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.setGridColor(new java.awt.Color(255, 255, 255));
        Tabla.setName(""); // NOI18N
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla);
        Tabla.getColumnModel().getColumn(0).setMinWidth(40);
        Tabla.getColumnModel().getColumn(0).setPreferredWidth(40);
        Tabla.getColumnModel().getColumn(0).setMaxWidth(40);
        Tabla.getColumnModel().getColumn(2).setMinWidth(130);
        Tabla.getColumnModel().getColumn(2).setPreferredWidth(130);
        Tabla.getColumnModel().getColumn(2).setMaxWidth(130);
        Tabla.getColumnModel().getColumn(3).setMinWidth(150);
        Tabla.getColumnModel().getColumn(3).setPreferredWidth(150);
        Tabla.getColumnModel().getColumn(3).setMaxWidth(150);

        txtDir.setEnabled(false);

        mnuArchivo.setText("Archivo");
        mnuArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuArchivoActionPerformed(evt);
            }
        });

        mnuAbrir.setText("Abrir");
        mnuAbrir.setEnabled(false);
        mnuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAbrirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuAbrir);

        mnuEliminar.setText("Eliminar");
        mnuEliminar.setEnabled(false);
        mnuEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEliminarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuEliminar);

        mnuCrear.setText("Crear Nueva Carpeta...");
        mnuCrear.setEnabled(false);
        mnuCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCrearActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuCrear);

        mnuOrganizar.setText("Organizar archivos");
        mnuOrganizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOrganizarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuOrganizar);

        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        mnuArchivo.add(jMenuItem5);

        jMenuBar1.add(mnuArchivo);

        mnuEdicion.setText("Edicion");
        mnuEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEdicionActionPerformed(evt);
            }
        });

        mnuCopiar.setText("Copiar");
        mnuCopiar.setEnabled(false);
        mnuCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopiarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuCopiar);

        mnuPegar.setText("Pegar");
        mnuPegar.setEnabled(false);
        mnuPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPegarActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuPegar);

        mnuCambiarNombre.setText("Cambiar Nombre");
        mnuCambiarNombre.setEnabled(false);
        mnuCambiarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCambiarNombreActionPerformed(evt);
            }
        });
        mnuEdicion.add(mnuCambiarNombre);

        jMenuBar1.add(mnuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
            .addComponent(txtDir)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ArbolMouseClicked
        // TODO add your handling code here:
        try {
            int row = Arbol.getClosestRowForLocation(evt.getX(), evt.getY());
            Arbol.setSelectionRow(row);
            Object o = Arbol.getSelectionPath().getLastPathComponent();
            seleccionado = (DefaultMutableTreeNode) o;
            carpeta = (File) seleccionado.getUserObject();
            txtDir.setText(carpeta.getPath() + "\\");
            Actualizar();
        } catch (Exception e) {
        }
        mnuCrear.setEnabled(true);
    }//GEN-LAST:event_ArbolMouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        // TODO add your handling code here:
        int indic = Tabla.getSelectedRow();
        try {
            File[] a = carpeta.listFiles();
            if (a.length > 0) {
                archSelected = a[indic];
            } else {
                archSelected = carpeta;
            }
        } catch (Exception e) {
        }
        mnuAbrir.setEnabled(true);
        mnuEliminar.setEnabled(true);
        mnuCopiar.setEnabled(true);
        mnuCambiarNombre.setEnabled(true);
    }//GEN-LAST:event_TablaMouseClicked

    private void mnuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAbrirActionPerformed
        // TODO add your handling code here:
        if (archSelected.getName().endsWith("txt")) {
            //cargar el archivo con el editor de texto
            frmEditorTexto a = new frmEditorTexto(archSelected, usr);
            a.setVisible(true);
        } else if (archSelected.getName().endsWith("jpg")
                || archSelected.getName().endsWith("png")
                || archSelected.getName().endsWith("gif")
                || archSelected.getName().endsWith("jpeg")
                || archSelected.getName().endsWith("bmp")) {
            File[] archs = carpeta.listFiles();
            File[] imagenes = new File[archs.length];
            int indice = 0, j = 0;
            for (int i = 0; i < archs.length; i++) {
                if (archs[i].getName().endsWith("jpg")
                        || archs[i].getName().endsWith("png")
                        || archs[i].getName().endsWith("gif")
                        || archs[i].getName().endsWith("jpeg")
                        || archs[i].getName().endsWith("bmp")) {
                    imagenes[j] = archs[i];
                    j++;
                }
                if (archs[i].getName().equals(archSelected.getName())) {
                    indice = i;
                }
            }
            frmVisorImagenes ima = new frmVisorImagenes(imagenes, archs, indice);
            ima.setVisible(true);
        } else if (archSelected.getName().endsWith("mp3")) {
            frmReproductor repro = new frmReproductor(archSelected, usr);
            repro.setVisible(true);
        } else if (archSelected.isDirectory()) {
            carpeta = archSelected;
            AbrirCarpeta();
            txtDir.setText(carpeta.getPath() + "\\");
        } else {
            JOptionPane.showMessageDialog(this.getFrames()[0], "No se encontro un programa para abrir el archivo");
        }
    }//GEN-LAST:event_mnuAbrirActionPerformed

    private void mnuEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEliminarActionPerformed
        // TODO add your handling code here:
        Eliminar(archSelected);
    }//GEN-LAST:event_mnuEliminarActionPerformed

    private void mnuCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopiarActionPerformed
        // TODO add your handling code here:
        copiado = archSelected;
        mnuPegar.setEnabled(true);
    }//GEN-LAST:event_mnuCopiarActionPerformed

    private void mnuPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPegarActionPerformed
        // TODO add your handling code here:
        if (copiado != null) {
            Pegar();
            copiado = null;
        }
        mnuPegar.setEnabled(false);
        Actualizar();
    }//GEN-LAST:event_mnuPegarActionPerformed

    private void mnuEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEdicionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuEdicionActionPerformed

    private void mnuCambiarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCambiarNombreActionPerformed
        // TODO add your handling code here:
        File[] archivos = carpeta.listFiles();
        int row = 0;
        for (int i = 0; i < archivos.length; i++) {
            if (archivos[i].getName().equals(archSelected.getName())) {
                row = i;
            }
        }
        String NuevoNombre = JOptionPane.showInputDialog(getFrames()[1], "Ingrese el nuevo nombre del archivo: ");
        if (NuevoNombre == null) {
        } else {
            String na = archSelected.getName();
            if (archSelected.isDirectory()) {
                File cambiar = new File(archSelected.getParent() + "\\" + NuevoNombre);
                archSelected.renameTo(cambiar);
            } else {
                String ext = na.substring(na.length() - 4, na.length());
                File cambiar = new File(archSelected.getParent() + "\\" + NuevoNombre + ext);
                archSelected.renameTo(cambiar);
            }
            Actualizar();
        }
    }//GEN-LAST:event_mnuCambiarNombreActionPerformed

    private void mnuCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCrearActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(getFrames()[1], "Nombre de la nueva carpeta");
        if (name == null) {
        } else {
            File nuevaCarpeta = new File(carpeta.getPath() + "\\" + name);
            nuevaCarpeta.mkdir();
            Actualizar();
        }
    }//GEN-LAST:event_mnuCrearActionPerformed

    private void mnuArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuArchivoActionPerformed

    private void mnuOrganizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOrganizarActionPerformed
        // TODO add your handling code here:
        File raiz = new File("./" + usr + "/");
        OrganizarTexto(raiz);
        OrganizarImagenes(raiz);
        OrganizarMusica(raiz);
        Actualizar();
    }//GEN-LAST:event_mnuOrganizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmExplorador().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Arbol;
    private javax.swing.JTable Tabla;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnuAbrir;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenuItem mnuCambiarNombre;
    private javax.swing.JMenuItem mnuCopiar;
    private javax.swing.JMenuItem mnuCrear;
    private javax.swing.JMenu mnuEdicion;
    private javax.swing.JMenuItem mnuEliminar;
    private javax.swing.JMenuItem mnuOrganizar;
    private javax.swing.JMenuItem mnuPegar;
    private javax.swing.JTextField txtDir;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode seleccionado;
    Container panel = getContentPane();
    File carpeta;
    File archSelected;
    File copiado;
    String usr;
    private File midir;

    public void Eliminar(File ar) {
        if (ar.getPath().endsWith(".bin")) {
            JOptionPane.showMessageDialog(this.getFrames()[0], "No se puede eliminar porque es un archivo del sistema");
        } else {
            if (ar.delete()) {
            } else {
                borrarDirectorio(ar);
                ar.delete();
            }
            Actualizar();
        }
    }

    public void Actualizar() {
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
        try {
            if (modelo.getRowCount() > 0) {//para limpiar la tabla
                int filas = modelo.getRowCount();
                for (int j = 0; j < filas; j++) {
                    modelo.removeRow(0);
                }
            }
        } catch (IllegalArgumentException iarex) {
        }
        try {
            if (carpeta.isDirectory()) {
                File[] archivos;
                archivos = carpeta.listFiles();
                String[] content = carpeta.list();
                for (int i = 0; i < content.length; i++) {
                    Object[] fila = new Object[5];
                    if (content[i].endsWith(".txt")) {
                        ImageIcon icon = new ImageIcon(".\\src\\Iconos\\texto.gif");
                        fila[0] = new JLabel(icon);
                        fila[2] = "Archivo de texto";
                    } else if (content[i].endsWith(".jpg") || content[i].endsWith(".jpeg") || content[i].endsWith(".png") || content[i].endsWith(".gif")) {
                        ImageIcon icon = new ImageIcon(".\\src\\Iconos\\imagen.jpg");
                        fila[0] = new JLabel(icon);
                        fila[2] = "Imágen";
                    } else if (content[i].endsWith(".mp3")) {
                        ImageIcon icon = new ImageIcon(".\\src\\Iconos\\audio.gif");
                        fila[0] = new JLabel(icon);
                        fila[2] = "Música";
                    } else if (archivos[i].isDirectory()) {
                        ImageIcon icon = new ImageIcon(".\\src\\Iconos\\carpeta.png");
                        fila[0] = new JLabel(icon);
                        fila[2] = "Carpeta de archivos";
                    } else {
                        ImageIcon icon = new ImageIcon(".\\src\\Iconos\\desconocido.gif");
                        fila[0] = new JLabel(icon);
                        fila[2] = "Archivo desconocido";
                    }
                    fila[1] = content[i];
                    long ms = archivos[i].lastModified();
                    Date d = new Date(ms);
                    Calendar c = new GregorianCalendar();
                    c.setTime(d);
                    String dia = "", mes = "", anio = "", hora = "", minuto = "", segundo = "";
                    if (c.get(Calendar.YEAR) < 10) {
                        anio = "0" + c.get(Calendar.YEAR);
                    } else {
                        anio = c.get(Calendar.YEAR) + "";
                    }
                    if (c.get(Calendar.MONTH) < 10) {
                        mes = "0" + c.get(Calendar.MONTH);
                    } else {
                        mes = c.get(Calendar.MONTH) + "";
                    }
                    if (c.get(Calendar.DATE) < 10) {
                        dia = "0" + c.get(Calendar.DATE);
                    } else {
                        dia = c.get(Calendar.DATE) + "";
                    }
                    if (c.get(Calendar.HOUR) < 10) {
                        hora = "0" + c.get(Calendar.HOUR);
                    } else {
                        hora = c.get(Calendar.HOUR) + "";
                    }
                    if (c.get(Calendar.MINUTE) < 10) {
                        minuto = "0" + c.get(Calendar.MINUTE);
                    } else {
                        minuto = c.get(Calendar.MINUTE) + "";
                    }
                    if (c.get(Calendar.SECOND) < 10) {
                        segundo = "0" + c.get(Calendar.SECOND);
                    } else {
                        segundo = c.get(Calendar.SECOND) + "";
                    }
                    fila[3] = anio + "/" + mes + "/" + dia + "; " + hora + ":" + minuto + ":" + segundo;
                    fila[4] = archivos[i].length() / 1024;
                    modelo.addRow(fila);
                }
                Tabla.setModel(modelo);
                Tabla.setAutoCreateRowSorter(true);
            }
        } catch (Exception e) {
        }
    }

    public void Pegar2(File copiado, File carpeta) {
        if (copiado.isDirectory()) {
            JOptionPane.showMessageDialog(getFrames()[1], "No se pueden copiar carpetas", "Error", 0);
        } else {
            InputStream inStream = null;
            OutputStream outStream = null;
            try {
                File afile = new File(copiado.getPath());
                File bfile = new File(carpeta.getPath()+"/"+copiado.getName());
                inStream = new FileInputStream(afile);
                outStream = new FileOutputStream(bfile);
                byte[] buffer = new byte[1024];
                int length;
                //copia el contenido en bytes
                while ((length = inStream.read(buffer)) > 0) {
                    outStream.write(buffer, 0, length);
                }
                inStream.close();
                outStream.close();
                //borra el archivo original
                afile.delete();
            } catch (IOException e) {
            }
        }//fin desicion carpetas
    }

    public void Pegar() {
        if (copiado.isDirectory()) {
            JOptionPane.showMessageDialog(getFrames()[1], "No se pueden copiar carpetas", "Error", 0);
        } else {
            FileInputStream entrada_binaria = null;
            File destino = new File(carpeta.getPath() + "\\" + copiado.getName());
            try {
                entrada_binaria = new FileInputStream(copiado);
                FileOutputStream salida_binaria = new FileOutputStream(destino);
                FileChannel canaldelectura = entrada_binaria.getChannel();
                FileChannel canaldeescritura = salida_binaria.getChannel();
                long fsize = canaldelectura.size();
                //Colocar bytes en el buffer de memoria
                MappedByteBuffer buffer_bytes = canaldelectura.map(FileChannel.MapMode.READ_ONLY, 0, fsize);
                //se copia el archivo
                canaldeescritura.write(buffer_bytes);
                canaldelectura.close();
                entrada_binaria.close();
                canaldeescritura.close();
            } catch (IOException ex) {
            } finally {
                try {
                    entrada_binaria.close();
                } catch (IOException ex) {
                }
            }
        }
    }

    public void AbrirCarpeta() {

        carpeta = archSelected;

        Actualizar();
    }

    public void borrarDirectorio(File directorio) {
        try {
            File[] ficheros = directorio.listFiles();
            for (int x = 0; x < ficheros.length; x++) {
                if (ficheros[x].isDirectory()) {
                    borrarDirectorio(ficheros[x]);
                }
                ficheros[x].delete();
            }
        } catch (Exception ex) {
        }
    }

    public void OrganizarTexto(File directorio) {
        File[] ficheros = directorio.listFiles();
        for (int x = 0; x < ficheros.length; x++) {
            File fic = new File(ficheros[x].getPath());
            if (ficheros[x].isDirectory()) {
                OrganizarTexto(ficheros[x]);
            } else {
                if (ficheros[x].getName().endsWith(".txt")) {
                    if (ficheros[x].getPath().contains("\\Documentos\\")) {
                    } else {
                        File car = new File("C:/" + usr + "/Documentos/");
                        Pegar2(fic, car);
                    }
                }
            }
        }
    }

    public void OrganizarImagenes(File directorio) {
        File[] ficheros = directorio.listFiles();
        for (int x = 0; x < ficheros.length; x++) {
            File fic = new File(ficheros[x].getPath());
            if (ficheros[x].isDirectory()) {
                OrganizarImagenes(ficheros[x]);
            } else {
                if (ficheros[x].getName().endsWith(".jpg") || ficheros[x].getName().endsWith(".gif")
                        || ficheros[x].getName().endsWith(".png") || ficheros[x].getName().endsWith(".jpeg")
                        || ficheros[x].getName().endsWith(".bmp")) {
                    if (ficheros[x].getPath().contains("\\Imagenes\\")) {
                    } else {
                        File car = new File("C:/" + usr + "/Imagenes/");
                        Pegar2(fic, car);
                    }
                }
            }
        }
    }

    public void OrganizarMusica(File directorio) {
        File[] ficheros = directorio.listFiles();
        for (int x = 0; x < ficheros.length; x++) {
            File fic = new File(ficheros[x].getPath());
            if (ficheros[x].isDirectory()) {
                OrganizarMusica(ficheros[x]);
            } else {
                if (ficheros[x].getName().endsWith(".mp3")) {
                    if (ficheros[x].getPath().contains("\\Musica\\")) {
                    } else {
                        File car = new File("C:/" + usr + "/Musica/");
                        Pegar2(fic, car);
                    }
                }
            }
        }
    }
}
